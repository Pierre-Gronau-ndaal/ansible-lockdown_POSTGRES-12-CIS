---

# Section 4
# User Access and Authorization
- name: "4.1 | PATCH | Ensure sudo is configured correctly"
  block:
      - name: "4.1 | PATCH | Ensure sudo is configured correctly | Configure pg_wheel to sudoers"
        ansible.builtin.lineinfile:
            path: /etc/sudoers.d/postgres
            regexp: '^%pg_wheel ALL='
            line: '%pg_wheel ALL= /bin/su - {{ pgs12cis_pgs12_usr }}'
            create: true

      - name: "4.1 | PATCH | Ensure sudo is configured correctly | Set file permissions"
        file:
            path: /etc/sudoers.d/postgres
            mode: 0600
  when:
      - pgs12cis_rule_4_1
      - pgs12cis_section4
  tags:
      - level1-postgresqlonlinux
      - patch
      - ubuntu
      - rule_4.1

- name: "4.2 | PATCH | Ensure excessive administrative privileges are revoked"
  block:
      - name: "4.2 | AUDIT | Ensure excessive administrative privileges are revoked | Get list of PostgreSQL users"
        ansible.builtin.shell: psql -t -c "\du" | awk '{print $1}' | sed -r '/^\s*$/d'
        changed_when: false
        failed_when: false
        become_user: "{{ pgs12cis_pgs12_usr }}"
        register: pgs12cis_4_2_all_postgresql_users

      - name: "4.2 | AUDIT | Ensure excessive administrative privileges are revoked | Get list of disallowed superusers"
        ansible.builtin.set_fact:
            pgs12cis_disallowed_superusers: "{{ pgs12cis_4_2_all_postgresql_users.stdout_lines | difference(pgs12cis_allowed_superusers) }}"

      - name: "4.2 | PATCH | Ensure excessive administrative privileges are revoked | Remove excessive privileges from users"
        ansible.builtin.shell: psql -c 'alter user {{ item }} with NOSUPERUSER NOCREATEROLE NOCREATEDB NOREPLICATION NOBYPASSRLS ;'
        become_user: "{{ pgs12cis_pgs12_usr }}"
        with_items:
            - "{{ pgs12cis_disallowed_superusers }}"
  when:
      - pgs12cis_rule_4_2
      - pgs12cis_section4
  tags:
      - level1-postgresql
      - patch
      - ubuntu
      - rule_4.2

- name: "4.4 | AUDIT | Ensure excessive DML privileges are revoked | Absent"
  ansible.builtin.debug:
      msg:
          - "Warning!! Please review all users and databases to determine no users have excessive DML privileges"
          - "If a user has excessive DML privileges that user can change or delete ifnormation without proper"
          - "authorization and this is a finding. This is a manual task."

- name: "4.4 | AUDIT  | Ensure excessive DML privileges are revoked | Present"
  ansible.builtin.import_tasks: warning_facts.yml
  vars:
      warn_control_id: '4.4'
  when:
      - pgs12cis_rule_4_4
      - pgs12cis_section4
  tags:
      - level1-postgresql
      - audit
      - ubuntu
      - rule_4.4

- name: "4.5 | AUDIT | Use pg_permission extension to audit object permissions"
  block:
      - name: "4.5 | AUDIT | Use pg_permission extension to audit object permissions | Get pg_permission status"
        ansible.builtin.shell: psql -c "select t.schemaname, t.tablename, u.usename, has_table_privilege(u.usename, t.tablename, 'select') as select, has_table_privilege(u.usename, t.tablename, 'insert') as insert, has_table_privilege(u.usename, t.tablename, 'update') as update, has_table_privilege(u.usename, t.tablename, 'delete') as delete from pg_tables t, pg_user u where t.schemaname not in ('information_schema','pg_catalog');" | grep rows | tr -d '()'
        changed_when: false
        failed_when: false
        become_user: "{{ pgs12cis_pgs12_usr }}"
        register: pgs12cis_4_5_pg_permission_status

      - name: "4.5 | AUDIT | Use pg_permission extension to audit object permissions | Alert on not available | Absent"
        ansible.builtin.debug:
            msg:
                - "Warning!! You do not have the pg_permission module installed and this this is a finding"
                - "Please review and install the pg_permission module then configure as needed. This is a manual task."
        when: "'0 rows' in pgs12cis_4_5_pg_permission_status.stdout"

      - name: "4.5 | AUDIT | Use pg_permission extension to audit object permissions | Warning on available"
        ansible.builtin.debug:
            msg: "Good News! You have the module available for use. Please make sure it configured correctly"
        when: "'0 rows' not in pgs12cis_4_5_pg_permission_status.stdout"

      - name: "4.5 | AUDIT | Use pg_permission extension to audit object permissions | Present"
        ansible.builtin.import_tasks: warning_facts.yml
  vars:
      warn_control_id: '4.5'
  when:
      - pgs12cis_rule_4_5
      - pgs12cis_section4
  tags:
      - level1-postgresql
      - audit
      - ubuntu
      - rule_4.5

- name: "4.6 | AUDIT | Ensure Row Level Security (RLS) is configured correctly"
  block:
      - name: "4.6 | AUDIT | Ensure Row Level Security (RLS) is configured correctly | Get databases using RLS"
        ansible.builtin.shell: psql -c 'SELECT oid, relname, relrowsecurity FROM pg_class WHERE relrowsecurity IS TRUE;'
        changed_when: false
        failed_when: false
        become_user: "{{ pgs12cis_pgs12_usr }}"
        register: pgs12cis_4_6_rls_databases

      - name: "4.6 | AUDIT | Ensure Row Level Security (RLS) is configured correctly | Absent"
        ansible.builtin.debug:
            msg:
                - "Warning!! You need to confirm RLS is configured correctly"
                - "Below are the tables that are using RLS. This is a manual task."
                - "{{ pgs12cis_4_6_rls_databases.stdout_lines }}"

      - name: "4.6 | AUDIT | Ensure Row Level Security (RLS) is configured correctly | Present"
        ansible.builtin.import_tasks: warning_facts.yml
  vars:
      warn_control_id: '4.6'
  when:
      - pgs12cis_rule_4_6
      - pgs12cis_section4
  tags:
      - level1-postgresql
      - audit
      - ubuntu
      - rule_4.6

- name: "4.7 | AUDIT | Ensure the set_user extension is installed"
  block:
      - name: "4.7 | AUDIT | Ensure the set_user extension is installed | Get set_user status"
        ansible.builtin.shell: psql -c "select * from pg_available_extensions where name = 'set_user';" | grep rows | tr -d '()'
        changed_when: false
        failed_when: false
        become_user: "{{ pgs12cis_pgs12_usr }}"
        register: pgs12cis_4_7_set_user_status

      - name: "4.7 | AUDIT | Ensure the set_user extension is installed | Absent"
        ansible.builtin.debug:
            msg:
                - "Warning!! You do not have the set_user extention installed and this is a finding."
                - "Please review and install the set_user extention then configure as needed. This is a manual task."
        when: "'0 rows' in pgs12cis_4_7_set_user_status.stdout"

      - name: "4.7 | AUDIT | Ensure the set_user extension is installed | Absent"
        ansible.builtin.debug:
            msg: "Good News! You have the module available for use. Please make sure it is configured correctly"
        when: "'0 rows' not in pgs12cis_4_7_set_user_status.stdout"

      - name: "4.7 | AUDIT | Ensure the set_user extension is installed | Present"
        ansible.builtin.import_tasks: warning_facts.yml
  vars:
      warn_control_id: '4.7'
  when:
      - pgs12cis_rule_4_7
      - pgs12cis_section4
  tags:
      - level1-postgresql
      - audit
      - ubuntu
      - rule_4.7

- name: "4.8 | AUDIT | Make use of default roles"
  block:
      - name: "4.8 | AUDIT | Make use of default roles | Get superusers"
        ansible.builtin.shell: psql -c 'select rolname from pg_roles where rolsuper is true;'
        changed_when: false
        failed_when: false
        become_user: "{{ pgs12cis_pgs12_usr }}"
        register: pgs12cis_4_8_superusers

      - name: "4.8 | AUDIT | Make use of default roles | Absent"
        ansible.builtin.debug:
            msg:
                - "Warning!! Below are the superusers, please review and add any needed users to the superusers"
                - "or remove any users that should not have superuser status. This is a manual task."
                - "{{ pgs12cis_4_8_superusers.stdout_lines }}"

      - name: "4.8 | AUDIT | Make use of default roles | Present"
        ansible.builtin.import_tasks: warning_facts.yml
  vars:
      warn_control_id: '4.8'
  when:
      - pgs12cis_rule_4_8
      - pgs12cis_section4
  tags:
      - level1-postgresql
      - audit
      - ubuntu
      - rule_4.8

# Section 5
# Connection and Login
- name: "5.1 | PATCH | Ensure login via 'local' UNIX Domain Socket is configured correctly | Absent"
  ansible.builtin.debug:
      msg:
          - "Warning!! Please ensure logins via 'local' Unix Domain Socket is configured correctly. This is a manual task."

- name: "5.1 | AUDIT | Ensure login via 'local' UNIX Domain Socket is configured correctly | Present"
  ansible.builtin.import_tasks: warning_facts.yml
  vars:
      warn_control_id: '5.1'
  when:
      - pgs12cis_rule_5_1
      - pgs12cis_section5
  tags:
      - level1-postgresqlonlinux
      - audit
      - ubuntu
      - rule_5.1

- name: "5.2 | PATCH | Ensure login via 'host' TCP/IP Socket is configured correctly"
  block:
      - name: "5.2 | PATCH | Ensure login via 'host' TCP/IP Socket is configured correctly | Set listen_addresses"
        ansible.builtin.lineinfile:
            path: "{{ pgs12cis_config_file }}"
            regexp: '^listen_addresses =|^#listen_addresses ='
            line: "listen_addresses = '*'"
        notify: restart postgresql

      - name: "5.2 | PATCH | Ensure login via 'host' TCP/IP Socket is configured correctly | Set allow encrypted and deny unencrypted"
        ansible.builtin.lineinfile:
            path: "{{ pgs12cis_hba_config_file }}"
            regexp: "{{ item.regexp }}"
            line: "{{ item.line }}"
            insertafter: "{{ item.insertafter }}"
        notify: restart postgresql
        with_items:
            - { regexp: '^this is just a place holder value', line: '# The two rules below were inserted via CIS automation', insertafter: '^#.*TYPE.*DATABASE.*USER.*ADDRESS.*METHOD' }
            - { regexp: '^hostnossl.*all.*{{ pgs12cis_pgs12_usr }}', line: 'hostnossl all           {{ pgs12cis_pgs12_usr }}        0.0.0.0/0               reject', insertafter: '# The two rules below were inserted via CIS automation' }
            - { regexp: '^hostssl.*all.*{{ pgs12cis_pgs12_usr }}', line: "hostssl all             {{ pgs12cis_pgs12_usr }}        0.0.0.0/0               {{ pgs12cis_encrypt_method }}", insertafter: '# The two rules below were inserted via CIS automation' }
  when:
      - pgs12cis_rule_5_2
      - pgs12cis_section5
  tags:
      - level1-postgresqlonlinux
      - audit
      - ubuntu
      - rule_5.2

# Section 6
# PostgreSQL Settings
- name: "6.1 | AUDIT | Ensure 'Attack Vectors' Runtime Parameters are Configured | Absent"
  ansible.builtin.debug:
      msg:
          - "Warning!! Please review all configuration settings. Configure PostgreSQL logging to record"
          - "all modifications and changes to the RDBMS. This is a manual task."

- name: "6.1 | AUDIT | Ensure 'Attack Vectors' Runtime Parameters are Configured | Present"
  ansible.builtin.import_tasks: warning_facts.yml
  vars:
      warn_control_id: '6.1'
  when:
      - pgs12cis_rule_6_1
      - pgs12cis_section6
  tags:
      - level1-postgresql
      - level1-postgresqlonlinux
      - audit
      - ubuntu
      - rule_6.1

- name: "6.2 | AUDIT | Ensure 'backend' runtime parameters are configured correctly"
  block:
      - name: "6.2 | AUDIT | Ensure 'backend' runtime parameters are configured correctly | Get backend runtime parameters"
        ansible.builtin.shell: psql -c "SELECT name, setting FROM pg_settings WHERE context IN ('backend','superuser-backend') ORDER BY 1;"
        changed_when: false
        failed_when: false
        become_user: "{{ pgs12cis_pgs12_usr }}"
        register: pgs12cis_6_2_backend_runtime_param

      - name: "6.2 | AUDIT | Ensure 'backend' runtime parameters are configured correctly | Get process output"
        ansible.builtin.shell: ps aux | grep -E '[p]ost' | grep -- '-[D]'
        changed_when: false
        failed_when: false
        register: pgs12cis_6_2_process_output

      - name: "6.2 | AUDIT | Ensure 'backend' runtime parameters are configured correctly | Message out parameters"
        ansible.builtin.debug:
            msg:
                - "Warning!! Please review this output and compare with a previous OK output looking for any changes"
                - "Also review the postgresql.conf and postgresql.auto.conf and compare them with previously archived"
                - "files looking for changes. This is a manual task."
                - "{{ pgs12cis_6_2_backend_runtime_param.stdout_lines }}"
                - ""
                - "Please review the process output below and look for parameters that were used at server startup"
                - "{{ pgs12cis_6_2_process_output.stdout_lines }}"

      - name: "6.2 | AUDIT | Ensure 'backend' runtime parameters are configured correctly | Present"
        ansible.builtin.import_tasks: warning_facts.yml
  vars:
      warn_control_id: '6.2'
  when:
      - pgs12cis_rule_6_2
      - pgs12cis_section6
  tags:
      - level1-postgresql
      - level1-postgresqlonlinux
      - audit
      - ubuntu
      - rule_6.2

- name: "6.4 | AUDIT | Ensure 'SIGHUP' Runtime Parameters are Configured"
  block:
      - name: "6.4 | AUDIT | Ensure 'SIGHUP' Runtime Parameters are Configured | Get sighup settings"
        ansible.builtin.shell: psql -c "SELECT name, setting FROM pg_settings WHERE context = 'sighup' ORDER BY 1;"
        changed_when: false
        failed_when: false
        become_user: "{{ pgs12cis_pgs12_usr }}"
        register: pgs12cis_6_4_sighup_settings

      - name: "6.4 | AUDIT | Ensure 'SIGHUP' Runtime Parameters are Configured | Message out settings"
        ansible.builtin.debug:
            msg:
                - "Warning!! Below are the current sighup settings. Please revert all values in the PostgreSQL configuration files"
                - "and invoke the server to reload the configuration files. This is a manual task."
                - "{{ pgs12cis_6_4_sighup_settings.stdout_lines }}"

      - name: "6.4 | AUDIT | Ensure 'SIGHUP' Runtime Parameters are Configured | Present"
        ansible.builtin.import_tasks: warning_facts.yml
  vars:
      warn_control_id: '6.4'
  when:
      - pgs12cis_rule_6_4
      - pgs12cis_section6
  tags:
      - level1-postgresql
      - level1-postgresqlonlinux
      - audit
      - ubuntu
      - rule_6.4

- name: "6.5 | AUDIT | Ensure 'Superuser' Runtime Parameters are Configured"
  block:
      - name: "6.5 | AUDIT | Ensure 'Superuser' Runtime Parameters are Configured | Get superuser settings"
        ansible.builtin.shell: psql -c "SELECT name, setting FROM pg_settings WHERE context = 'superuser' ORDER BY 1;"
        changed_when: false
        failed_when: false
        become_user: "{{ pgs12cis_pgs12_usr }}"
        register: pgs12cis_6_5_superuser_settings

      - name: "6.5 | AUDIT | Ensure 'Superuser' Runtime Parameters are Configured | Get process output"
        ansible.builtin.shell: ps aux | grep -E 'postgres' | grep -- '-[D]'
        changed_when: false
        failed_when: false
        register: pgs12cis_6_5_process_output

      - name: "6.5 | AUDIT | Ensure 'Superuser' Runtime Parameters are Configured | Message out settings"
        ansible.builtin.debug:
            msg:
                - "Warning!! Please review this output and compare with a previous OK output looking for any changes."
                - "Also review the postgresql.conf and postgresql.auto.conf and compare them with previously archived files looking for changes."
                - "{{ pgs12cis_6_5_superuser_settings.stdout_lines }}"
                - ""
                - "Please review the process output below and look for parameters that were used at server startup. This is a manual task."
                - "{{ pgs12cis_6_5_process_output.stdout_lines }}"

      - name: "6.5 | AUDIT | Ensure 'Superuser' Runtime Parameters are Configured | Present"
        ansible.builtin.import_tasks: warning_facts.yml
  vars:
      warn_control_id: '6.5'
  when:
      - pgs12cis_rule_6_5
      - pgs12cis_section6
  tags:
      - level1-postgresql
      - level1-postgresqlonlinux
      - audit
      - ubuntu
      - rule_6.5

- name: "6.6 | AUDIT | Ensure 'User' Runtime Parameters are Configured"
  block:
      - name: "6.6 | AUDIT | Ensure 'User' Runtime Parameters are Configured | Get user settings"
        ansible.builtin.shell: psql -c "SELECT name, setting FROM pg_settings WHERE context = 'user' ORDER BY 1;"
        changed_when: false
        failed_when: false
        become_user: "{{ pgs12cis_pgs12_usr }}"
        register: pgs12cis_6_6_user_settings

      - name: "6.6 | AUDIT | Ensure 'User' Runtime Parameters are Configured | Message out settings"
        ansible.builtin.debug:
            msg:
                - "Warning!! In the matter of a user session, the login sessions must be validated that it is not executing undesired parameter changes."
                - "In the matter of attributes that have been changed in entities, they must be manually reverted to its default value(s)."
                - "This is a manual task."
                - "Below are the user settings"
                - "{{ pgs12cis_6_6_user_settings.stdout_lines }}"

      - name: "6.6 | AUDIT | Ensure 'User' Runtime Parameters are Configured | Present"
        ansible.builtin.import_tasks: warning_facts.yml
  vars:
      warn_control_id: '6.6'
  when:
      - pgs12cis_rule_6_6
      - pgs12cis_section6
  tags:
      - level1-postgresql
      - level1-postgresqlonlinux
      - audit
      - ubuntu
      - rule_6.6

- name: "6.7 | AUDIT | Ensure FIPS 140-2 OpenSSL Cryptography Is Used"
  block:
      - name: "6.7 | AUDIT | Ensure FIPS 140-2 OpenSSL Cryptography Is Used | Check for Fips being enabled"
        ansible.builtin.shell: cat /proc/sys/crypto/fips_enabled
        changed_when: false
        failed_when: false
        register: pgs12cis_ubuntu_fips_enabled

      - name: "6.7 | AUDIT | Ensure FIPS 140-2 OpenSSL Cryptography Is Used | Alert that FIPS is not enabled | Absent"
        ansible.builtin.debug:
            msg:
                - "Warning!! The system does not have FIPS 140-2 enabled"
                - "This is a finding and your system will not conform to control 6.7 of the PostgreSQL CIS"
                - "Enabling FIPS 140-2 and installing related packages requires an Ubuntu Advantage account"
                - "Please follow the guide in this link to enable FIPS 140-2. This is a manual task."
                - "https://security-certs.docs.ubuntu.com/en/fips"
        when:
            - pgs12cis_ubuntu_fips_enabled.stdout == "" or
              "'0' in pgs12cis_ubuntu_fips_enabled.stdout"

      - name: "6.7 | AUDIT | Ensure FIPS 140-2 OpenSSL Cryptography Is Used | Alert that FIPS is enabled"
        ansible.builtin.debug:
            msg: "Good News! FIPS 140-2 is enabled"
        when: "'1' in pgs12cis_ubuntu_fips_enabled.stdout"

      - name: "6.7 | AUDIT | Ensure FIPS 140-2 OpenSSL Cryptography Is Used | Present"
        ansible.builtin.import_tasks: warning_facts.yml
  vars:
      warn_control_id: '6.7'
  when:
      - pgs12cis_rule_6_7
      - pgs12cis_section6
  tags:
      - level1-postgresqlonlinux
      - audit
      - ubuntu
      - rule_6.7

- name: "6.8 | PATCH | Ensure SSL is enabled and configured correctly"
  ansible.builtin.lineinfile:
      path: "{{ pgs12cis_config_file }}"
      regexp: "{{ item.regexp }}"
      line: "{{ item.line }}"
      insertafter: "{{ item.insertafter }}"
  notify: restart postgresql
  with_items:
      - { regexp: '^ssl =|^#ssl =', line: 'ssl = on', insertafter: '# - SSL -' }
      - { regexp: '^ssl_ciphers =| ssl_ciphers =', line: "ssl_ciphers = '{{ pgs12cis_ssl_ciphers }}'", insertafter: 'ssl = on' }
      - { regexp: '^ssl_cert_file =|^#ssl_cert_file =', line: "ssl_cert_file = '{{ pgs12cis_ssl_cert_file }}'", insertafter: 'ssl = on' }
      - { regexp: '^ssl_key_file =|ssl_key_file =', line: "ssl_key_file = '{{ pgs12cis_ssl_key_file }}'", insertafter: 'ssl = on' }
      - { regexp: '^password_encryption =|^#password_encryption =', line: 'password_encryption = {{ pgs12cis_password_encryption }}', insertafter: 'ssl = on' }
  when:
      - pgs12cis_rule_6_8
      - pgs12cis_section6
  tags:
      - level1-postgresql
      - level1-postgresqlonlinux
      - patch
      - ubuntu
      - rule_6.8

- name: "6.9 | PATCH | Ensure the pgcrypto extension is installed and configured correctly"
  ansible.builtin.shell: psql -c "CREATE EXTENSION pgcrypto;"
  changed_when: "'CREATE' in pgs12cis_6_9_pgcrypto_status.stdout"
  failed_when: false
  register: pgs12cis_6_9_pgcrypto_status
  become_user: "{{ pgs12cis_pgs12_usr }}"
  when:
      - pgs12cis_rule_6_9
      - pgs12cis_section6
  tags:
      - level1-postgresql
      - level1-postgresqlonlinux
      - patch
      - ubuntu
      - rule_6.9

# Section 7
# Replication
- name: "7.1 | | PATCH | Ensure a replication-only user is created and used for streaming replication"
  block:
      - name: "7.1 | | AUDIT | Ensure a replication-only user is created and used for streaming replication | Create replication user"
        ansible.builtin.shell: psql -t -c "select rolname from pg_roles where rolreplication is true;" | sed -r '/^\s*$/d' | awk '{$1=$1};1'
        changed_when: false
        failed_when: false
        become_user: "{{ pgs12cis_pgs12_usr }}"
        register: pgs12cis_7_1_replication_users

      - name: "7.1 | | PATCH | Ensure a replication-only user is created and used for streaming replication | Create replication user"
        ansible.builtin.shell: psql -c "create user {{ pgs12cis_replication_user }} REPLICATION encrypted password '{{ pgs12cis_replication_user_pw }}';"
        failed_when: false
        become_user: "{{ pgs12cis_pgs12_usr }}"
        when: "pgs12cis_replication_user not in pgs12cis_7_1_replication_users.stdout"

      - name: "7.1 | | PATCH | Ensure a replication-only user is created and used for streaming replication | Create replication user pg_hba.conf entry"
        ansible.builtin.lineinfile:
            path: "{{ pgs12cis_hba_config_file }}"
            regexp: "{{ item.regexp }}"
            line: "{{ item.line }}"
            insertafter: "{{ item.insertafter }}"
        with_items:
            - { regexp: '^this is just a place holder value', line: '# The rule below was inserted via CIS automation', insertafter: '^# TYPE  DATABASE        USER'}
            - { regexp: '^hostssl replication     {{ pgs12cis_replication_user }}', line: "hostssl replication {{ pgs12cis_replication_user }} 0.0.0.0/0 {{ pgs12cis_replication_user_enc_method }}", insertafter: '^# The rule below was inserted via CIS automation' }
        notify: restart postgresql
        when: "pgs12cis_replication_user not in pgs12cis_7_1_replication_users.stdout"
  when:
      - pgs12cis_rule_7_1
      - pgs12cis_section7
  tags:
      - level1-postgresql
      - level1-postgresqlonlinux
      - patch
      - ubuntu
      - rule_7.1

- name: "7.2 | AUDIT | Ensure base backups are configured and functional | Absent"
  ansible.builtin.debug:
      msg:
          - "Warning!! To conform to CIS standards make sure to use base backups. This is a manual task."

- name: "7.2 | AUDIT | Ensure base backups are configured and functional | Present"
  ansible.builtin.import_tasks: warning_facts.yml
  vars:
      warn_control_id: '7.2'
  when:
      - pgs12cis_rule_7_2
      - pgs12cis_section7
  tags:
      - level1-postgresql
      - level1-postgresqlonlinux
      - audit
      - ubuntu
      - rule_7.2

- name: "7.3 | PATCH | Ensure WAL archiving is configured and functional"
  ansible.builtin.lineinfile:
      path: "{{ pgs12cis_config_file }}"
      regexp: "{{ item.regexp }}"
      line: "{{ item.line }}"
  notify: restart postgresql
  with_items:
      - { regexp: '^archive_mode =|^#archive_mode =', line: 'archive_mode = on' }
      - { regexp: '^archive_command =|^#archive_command =', line: "archive_command = '{{ pgs12cis_archive_command }}'" }
  when:
      - pgs12cis_rule_7_3
      - pgs12cis_section7
  tags:
      - level1-postgresqlonlinux
      - patch
      - ubuntu
      - rule_7.3

- name: "7.4 | AUDIT | Ensure streaming replication parameters are configured correctly | Absent"
  ansible.builtin.debug:
      msg:
          - "Warning!! Please ensure streaming replication parameters are configured. This is a manual task."

- name: "7.4 | AUDIT | Ensure packages are obtained from authorized repositories | Present"
  ansible.builtin.import_tasks: warning_facts.yml
  vars:
      warn_control_id: '7.4'
  when:
      - pgs12cis_rule_7_4
      - pgs12cis_section7
  tags:
      - level1-postgresql
      - level1-postgresqlonlinux
      - audit
      - ubuntu
      - rule_7.4

# Section 8
# Special Configuration Considerations
- name: "8.1 | AUDIT | Ensure PostgreSQL configuration files are outside the data cluster"
  block:
      - name: "8.1 | AUDIT | Ensure PostgreSQL configuration files are outside the data cluster | Get file list"
        ansible.builtin.shell: psql -c "select name, setting from pg_settings where name ~ '.*_file$';"
        changed_when: false
        failed_when: false
        become_user: "{{ pgs12cis_pgs12_usr }}"
        register: pgs12cis_8_1_files_used

      - name: "8.1 | AUDIT | Ensure PostgreSQL configuration files are outside the data cluster | Display file listings | Absent"
        ansible.builtin.debug:
            msg:
                - "Warning!! Please review the settings and determine appropriate locations and file permissions for the configuration files"
                - "based on organization's security policies. This is a manual task."
                - "{{ pgs12cis_8_1_files_used.stdout_lines }}"

      - name: "8.1 | AUDIT | Ensure PostgreSQL configuration files are outside the data cluster | Present"
        ansible.builtin.import_tasks: warning_facts.yml
  vars:
      warn_control_id: '8.1'
  when:
      - pgs12cis_rule_8_1
      - pgs12cis_section8
  tags:
      - level1-postgresql
      - level1-postgresqlonlinux
      - audit
      - ubuntu
      - rule_8.1

- name: "8.2 | AUDIT | Ensure PostgreSQL subdirectory locations are outside the data cluster"
  block:
      - name: "8.2 | AUDIT | Ensure PostgreSQL subdirectory locations are outside the data cluster | Get directory settings"
        ansible.builtin.shell: psql -c "select name, setting from pg_settings where (name ~ '_directory$' or name ~ '_tablespace');"
        changed_when: false
        failed_when: false
        become_user: "{{ pgs12cis_pgs12_usr }}"
        register: pgs12cis_8_2_directory_settings

      - name: "8.2 | AUDIT | Ensure PostgreSQL subdirectory locations are outside the data cluster | Display settings | Absent"
        ansible.builtin.debug:
            msg:
                - "Warning!! Please inspect the file and directory permissions for all returned values. Only superusers and authorized users"
                - "should have access control rights for these files and directories. This is a manual task."
                - "{{ pgs12cis_8_2_directory_settings.stdout_lines }}"

      - name: "8.2 | AUDIT | Ensure PostgreSQL subdirectory locations are outside the data cluster | Present"
        ansible.builtin.import_tasks: warning_facts.yml
  vars:
      warn_control_id: '8.2'
  when:
      - pgs12cis_rule_8_2
      - pgs12cis_section8
  tags:
      - level1-postgresql
      - level1-postgresqlonlinux
      - audit
      - ubuntu
      - rule_8.2

- name: "8.3 | AUDIT | Ensure the backup and restore tool, 'pgBackRest', is installed and configured"
  block:
      - name: "8.3 | AUDIT | Ensure the backup and restore tool, 'pgBackRest', is installed and configured | Check for pgBackRest"
        ansible.builtin.shell: which pgbackrest
        changed_when: false
        failed_when: false
        register: pgs12cis_pgbackrest_status

      - name: "8.3 | AUDIT | Ensure the backup and restore tool, 'pgBackRest', is installed and configured | Missing pgBackRest | Absent"
        ansible.builtin.debug:
            msg:
                - "Warning!! You do not have pgBackRest installed. Please install and configure pgBackRest. This is a manual task."
        when: "'no pgbackrest' in pgs12cis_pgbackrest_status.stdout"

      - name: "8.3 | AUDIT | Ensure the backup and restore tool, 'pgBackRest', is installed and configured | pgBackRest installed"
        ansible.builtin.debug:
            msg:
                - "Good News! You have pgBackRest installed. Make sure it is configured appropriately for things like stanza name, backup"
                - "location, retention policy, logging, etc. This is a manual task."
        when: "'no pgbackrest' not in pgs12cis_pgbackrest_status.stdout"

      - name: "8.3 | AUDIT | Ensure packages are obtained from authorized repositories | Present"
        ansible.builtin.import_tasks: warning_facts.yml
  vars:
      warn_control_id: '8.3'
  when:
      - pgs12cis_rule_8_3
      - pgs12cis_section8
  tags:
      - level1-postgresqlonlinux
      - audit
      - ubuntu
      - rule_8.3

- name: "8.4 | AUDIT | Ensure miscellaneous configuration settings are correct"
  block:
      - name: "8.4 | AUDIT | Ensure miscellaneous configuration settings are correct | Get settings"
        ansible.builtin.shell: psql -c "select name, setting from pg_settings where name in ('external_pid_file', 'unix_socket_directories','shared_preload_libraries','dynamic_library_path',' local_preload_libraries','session_preload_libraries');"
        changed_when: false
        failed_when: false
        become_user: "{{ pgs12cis_pgs12_usr }}"
        register: pgs12cis_8_4_settings

      - name: "8.4 | AUDIT | Ensure miscellaneous configuration settings are correct | Display settings | Absent"
        ansible.builtin.debug:
            msg:
                - "Warning!! Please review the settings to confirm permissions are based on organization's policies. This is a manual task."
                - "{{ pgs12cis_8_4_settings.stdout_lines }}"
      - name: "8.4 | AUDIT | Ensure miscellaneous configuration settings are correct  | Present"
        ansible.builtin.import_tasks: warning_facts.yml
  vars:
      warn_control_id: '8.4'
  when:
      - pgs12cis_rule_8_4
      - pgs12cis_section8
  tags:
      - level1-postgresql
      - level1-postgresqlonlinux
      - audit
      - ubuntu
      - rule_8.4
