---
# Section 1
# Installation and Patches
- name: "NOTSCORED | 1.1 | AUDIT | Ensure packages are obtained from authorized repositories"
  block:
      - name: "NOTSCORED | 1.1 | AUDIT | Ensure packages are obtained from authorized repositories | Get repo list RHEL8"
        shell: dnf repolist all | grep enabled
        changed_when: false
        failed_when: false
        register: pgs12cis_1_1_enabled_repos_rh8
        when: ansible_distribution_major_version == "8"

      - name: "NOTSCORED | 1.1 | AUDIT | Ensure packages are obtained from authorized repositories | Get repo list RHEL7"
        shell: yum repolist all | grep enabled
        changed_when: false
        failed_when: false
        register: pgs12cis_1_1_enabled_repos_rh7
        when: ansible_distribution_major_version == "7"

      - name: "NOTSCORED | 1.1 | AUDIT | Ensure packages are obtained from authorized repositories | Show repo list RHEL8"
        debug:
            msg:
                - "Alert! Below are the enabled repo's. Please review to confirm these are authorized repositories"
                - "{{ pgs12cis_1_1_enabled_repos_rh8.stdout_lines }}"
        when: ansible_distribution_major_version == "8"

      - name: "NOTSCORED | 1.1 | AUDIT | Ensure packages are obtained from authorized repositories | Show repo list RHEL8"
        debug:
            msg:
                - "Alert! Below are the enabled repo's. Please review to confirm these are authorized repositories"
                - "{{ pgs12cis_1_1_enabled_repos_rh7.stdout_lines }}"
        when: ansible_distribution_major_version == "7"
  when:
      - pgs12cis_rule_1_1
      - pgs12cis_section1
  tags:
      - level1-postgresql
      - notscored
      - audit
      - rule_1.1

- name: "NOTSCORED | 1.2 | AUDIT | Ensure Installation of Binary Packages"
  block:
      - name: "NOTSCORED | 1.2 | AUDIT | Ensure Installation of Binary Packages | Get installed packages and repo RHEL8"
        shell: dnf info $(rpm -qa|grep postgres) | egrep '^Name|^Version|^From'
        changed_when: false
        failed_when: false
        register: pgs12cis_1_2_installed_pckg_rpm_rh8
        when: ansible_distribution_major_version == "8"

      - name: "NOTSCORED | 1.2 | AUDIT | Ensure Installation of Binary Packages | Get installed packages and repo RHEL7"
        shell: yum info $(rpm -qa|grep postgres) | egrep '^Name|^Version|^From'
        changed_when: false
        failed_when: false
        register: pgs12cis_1_2_installed_pckg_rpm_rh7
        when: ansible_distribution_major_version == "7"

      - name: "NOTSCORED | 1.2 | AUDIT | Ensure Installation of Binary Packages | Show installed packages and repo RHEL8"
        debug:
            msg:
                - "Alert! Below are the installed postgres packages and where they came from"
                - "Please review and if the expected binary packages are not installed or did not come from an appropriate repo, this is a fail"
                - "{{ pgs12cis_1_2_installed_pckg_rpm_rh8.stdout_lines }}"
        when: ansible_distribution_major_version == "8"

      - name: "NOTSCORED | 1.2 | AUDIT | Ensure Installation of Binary Packages | Show installed packages and repo RHEL7"
        debug:
            msg:
                - "Alert! Below are the installed postgres packages and where they came from"
                - "Please review and if the expected binary packages are not installed or did not come from an appropriate repo, this is a fail"
                - "{{ pgs12cis_1_2_installed_pckg_rpm_rh7.stdout_lines }}"
        when: ansible_distribution_major_version == "7"
  when:
      - pgs12cis_rule_1_2
      - pgs12cis_section1
  tags:
      - level1-postgresqlonlinux
      - notscored
      - audit
      - rule_1.2

- name: "NOTSCORED | 1.3 | AUDIT | Ensure Installation of Community Packages"
  block:
      - name: "NOTSCORED | 1.3 | AUDIT | Ensure Installation of Community Packages | Get installed packages and repo RHEL8"
        shell: dnf info $(rpm -qa|grep postgres) | egrep '^Name|^Version|^From'
        changed_when: false
        failed_when: false
        register: pgs12cis_1_3_installed_pckg_rpm_rh8
        when: ansible_distribution_major_version == "8"

      - name: "NOTSCORED | 1.3 | AUDIT | Ensure Installation of Community Packages | Get installed packages and repo RHEL7"
        shell: yum info $(rpm -qa|grep postgres) | egrep '^Name|^Version|^From'
        changed_when: false
        failed_when: false
        register: pgs12cis_1_3_installed_pckg_rpm_rh7
        when: ansible_distribution_major_version == "7"

      - name: "NOTSCORED | 1.3 | AUDIT | Ensure Installation of Community Packages | Show installed packages and repo RHEL8"
        debug:
            msg:
                - "Alert! Below are the installed postgres packages and where they came from"
                - "Please review and if the expected community packages are not installed or did not come from the PGDG repo, this is a fail"
                - "{{ pgs12cis_1_3_installed_pckg_rpm_rh8.stdout_lines }}"
        when: ansible_distribution_major_version == "8"

      - name: "NOTSCORED | 1.3 | AUDIT | Ensure Installation of Community Packages | Show installed packages and repo RHEL7"
        debug:
            msg:
                - "Alert! Below are the installed postgres packages and where they came from"
                - "Please review and if the expected community packages are not installed or did not come from an PGDG repo, this is a fail"
                - "{{ pgs12cis_1_3_installed_pckg_rpm_rh7.stdout_lines }}"
        when: ansible_distribution_major_version == "7"
  when:
      - pgs12cis_rule_1_3
      - pgs12cis_section1
  tags:
      - level1-postgresqlonlinux
      - notscored
      - audit
      - rule_1.3

- name: "SCORED | 1.4 | PATCH | Ensure systemd Service Files Are Enabled"
  service:
      name: "{{ pgs12cis_postgresql_service }}"
      enabled: true
  when:
      - pgs12cis_rule_1_4
      - pgs12cis_section1
  tags:
      - level1-postgresqlonlinux
      - scored
      - patch
      - rule_1.4

- name: "SCORED | 1.5 | PATCH | Ensure Data Cluster Initialized Successfully"
  shell: 'PGSETUP_INITDB_OPTIONS="-k" /usr/pgsql-12/bin/postgresql-12-setup initdb'
  changed_when: '"OK" in pgs12cis_1_5_db_initialize.stdout'
  failed_when: false
  register: pgs12cis_1_5_db_initialize
  when:
      - pgs12cis_rule_1_5
      - pgs12cis_section1
  tags:
      - level1-postgresqlonlinux
      - scored
      - patch
      - rule_1.5

# Section 2
# Directory and File Permissions
- name: "SCORED | 2.1 | PATCH | Ensure the file permissions mask is correct"
  block:
      - name: "SCORED | 2.1 | AUDIT | Ensure the file permissions mask is correct | Get user environment file (.bashrc, .bash_profile, or .profile}"
        # shell: ls -a /var/lib/pgsql/ | grep -e '.bashrc\|.bash_profile\|.profile'
        shell: ls -a "{{ pgs12cis_pgs12_usr_home_dir.stdout }}" | grep -e '.bashrc\|.bash_profile\|.profile'
        changed_when: false
        failed_when: false
        register: pgs12cis_2_1_env_file

      - name: "SCORED | 2.1 | PATCH | Ensure the file permissions mask is correct | Set umask"
        lineinfile:
            path: "{{ pgs12cis_pgs12_usr_home_dir.stdout }}/{{ pgs12cis_2_1_env_file.stdout }}"
            regexp: '^umask|^UMASK'
            line: "umask 0{{ pgs12cis_umask_value }}"
  when:
      - pgs12cis_rule_2_1
      - pgs12cis_section2
  tags:
      - level1-postgresqlonlinux
      - scored
      - patch
      - rule_2.1

- name: "SCORED | 2.2 | PATCH | Ensure the PostgreSQL pg_wheel group membership is correct"
  block:
      - name: "SCORED | 2.2 | PATCH | Ensure the PostgreSQL pg_wheel group membership is correct | Create pg_wheel group"
        group:
            name: pg_wheel
            state: present

      - name: "SCORED | 2.2 | PATCH | Ensure the PostgreSQL pg_wheel group membership is correct"
        user:
            name: "{{ pgs12cis_pgs12_usr }}"
            groups: pg_wheel
  when:
      - pgs12cis_rule_2_2
      - pgs12cis_section2
  tags:
      - level1-postgresqlonlinux
      - scored
      - patch
      - rule_2.2

# Section 3
# # Logging Monitoring and Auditing
- name: "SCORED | 3.1.2 | PATCH |  Ensure the log destinations are set correctly"
  lineinfile:
      path: "{{ pgs12cis_data_folder }}/postgresql.conf"
      regexp: '^log_destination =|^#log_destination ='
      line: "log_destination = '{{ pgs12cis_log_destination }}'"
  notify: restart postgresql
  when:
      - pgs12cis_rule_3_1_2
      - pgs12cis_section3
  tags:
      - level1-postgresql
      - level1-postgresqlonlinux
      - scored
      - patch
      - rule_3.1.2

- name: "SCORED | 3.1.3 | PATCH | Ensure the logging collector is enabled"
  lineinfile:
      path: "{{ pgs12cis_data_folder }}/postgresql.conf"
      regexp: '^logging_collector =|^#logging_collector ='
      line: "logging_collector = on"
  notify: restart postgresql
  when:
      - pgs12cis_rule_3_1_3
      - pgs12cis_section3
  tags:
      - level1-postgresql
      - level1-postgresqlonlinux
      - scored
      - patch
      - rule_3.3

- name: "SCORED | 3.1.4 | PATCH | Ensure the log file destination directory is set correctly"
  lineinfile:
      path: "{{ pgs12cis_data_folder }}/postgresql.conf"
      regexp: '^log_directory =|^#log_directory ='
      line: "log_directory = '{{ pgs12cis_log_directory }}'"
  notify: restart postgresql
  when:
      - pgs12cis_rule_3_1_4
      - pgs12cis_section3
  tags:
      - level1-postgresql
      - level1-postgresqlonlinux
      - scored
      - patch
      - rule_3.1.4

- name: "SCORED | 3.1.5 | PATCH | Ensure the filename pattern for log files is set correctly"
  lineinfile:
      path: "{{ pgs12cis_data_folder }}/postgresql.conf"
      regexp: '^log_filename =|^#log_filename ='
      line: "log_filename = '{{ pgs12cis_log_filename }}'"
  notify: restart postgresql
  when:
      - pgs12cis_rule_3_1_5
      - pgs12cis_section3
  tags:
      - level1-postgresql
      - level1-postgresqlonlinux
      - scored
      - patch
      - rule_3.1.4

- name: "SCORED | 3.1.6 | PATCH | Ensure the log file permissions are set correctly"
  lineinfile:
      path: "{{ pgs12cis_data_folder }}/postgresql.conf"
      regexp: '^log_truncate_on_rotation =|^#log_truncate_on_rotation ='
      line: "log_truncate_on_rotation = on"
  notify: restart postgresql
  when:
      - pgs12cis_rule_3_1_6
      - pgs12cis_section3
  tags:
      - level1-postgresql
      - level1-postgresqlonlinux
      - scored
      - patch
      - rule_3.1.6

- name: "SCORED | 3.1.7 | PATCH | Ensure 'log_truncate_on_rotation' is enabled"
  lineinfile:
      path: "{{ pgs12cis_data_folder }}/postgresql.conf"
      regexp: '^log_file_mode =|^#log_file_mode ='
      line: "log_file_mode = 0{{ pgs12cis_log_file_mode }}"
  notify: restart postgresql
  when:
      - pgs12cis_rule_3_1_7
      - pgs12cis_section3
  tags:
      - level1-postgresql
      - level1-postgresqlonlinux
      - scored
      - patch
      - rule_3.1.7

- name: "SCORED | 3.1.8 | PATCH | Ensure the maximum log file lifetime is set correctly"
  lineinfile:
      path: "{{ pgs12cis_data_folder }}/postgresql.conf"
      regexp: '^log_rotation_age =|^#log_rotation_age ='
      line: "log_rotation_age = {{ pgs12cis_log_file_age }}"
  notify: restart postgresql
  when:
      - pgs12cis_rule_3_1_8
      - pgs12cis_section3
  tags:
      - level1-postgresql
      - level1-postgresqlonlinux
      - scored
      - patch
      - rule_3.1.8

- name: "SCORED | 3.1.9 | PATCH | Ensure the maximum log file size is set correctly"
  lineinfile:
      path: "{{ pgs12cis_data_folder }}/postgresql.conf"
      regexp: '^log_rotation_size =|^#log_rotation_size ='
      line: "log_rotation_size = {{ pgs12cis_log_rotation_size }}"
  notify: restart postgresql
  when:
      - pgs12cis_rule_3_1_9
      - pgs12cis_section3
  tags:
      - level1-postgresql
      - level1-postgresqlonlinux
      - scored
      - patch
      - rule_3.1.9

- name: "SCORED | 3.1.10 | PATCH | Ensure the correct syslog facility is selected"
  lineinfile:
      path: "{{ pgs12cis_data_folder }}/postgresql.conf"
      regexp: '^syslog_facility =|^#syslog_facility ='
      line: "syslog_facility = '{{ pgs12cis_syslog_facility }}'"
  notify: restart postgresql
  when:
      - pgs12cis_rule_3_1_10
      - pgs12cis_section3
  tags:
      - level1-postgresql
      - level1-postgresqlonlinux
      - scored
      - patch
      - rule_3.1.10

- name: "SCORED | 3.1.11 | PATCH | Ensure the program name for PostgreSQL syslog messages is correct"
  lineinfile:
      path: "{{ pgs12cis_data_folder }}/postgresql.conf"
      regexp: '^syslog_ident =|^#syslog_ident ='
      line: "syslog_ident = '{{ pgs12cis_syslog_ident }}'"
  notify: restart postgresql
  when:
      - pgs12cis_rule_3_1_11
      - pgs12cis_section3
  tags:
      - level1-postgresql
      - level1-postgresqlonlinux
      - scored
      - patch
      - rule_3.1.11

- name: "NOTSCORED | 3.1.12 | PATCH | Ensure the correct messages are written to the server log"
  lineinfile:
      path: "{{ pgs12cis_data_folder }}/postgresql.conf"
      regexp: '^log_min_messages =|^#log_min_messages ='
      line: "log_min_messages = {{ pgs12cis_log_min_messages }}"
  notify: restart postgresql
  when:
      - pgs12cis_rule_3_1_12
      - pgs12cis_section3
  tags:
      - level1-postgresql
      - level1-postgresqlonlinux
      - notscored
      - patch
      - rule_3.1.12

- name: "NOTSCORED | 3.1.13 | PATCH | Ensure the correct SQL statements generating errors are recorded"
  lineinfile:
      path: "{{ pgs12cis_data_folder }}/postgresql.conf"
      regexp: '^log_min_error_statement =|^#log_min_error_statement ='
      line: "log_min_error_statement = {{ pgs12cis_log_min_error_statement }}"
  notify: restart postgresql
  when:
      - pgs12cis_rule_3_1_13
      - pgs12cis_section3
  tags:
      - level1-postgresql
      - level1-postgresqlonlinux
      - notscored
      - patch
      - rule_3.1.13

- name: "SCORED | 3.1.14 | PATCH | Ensure 'debug_print_parse' is disabled"
  lineinfile:
      path: "{{ pgs12cis_data_folder }}/postgresql.conf"
      regexp: '^debug_print_parse =|^#debug_print_parse ='
      line: "debug_print_parse = off"
  notify: restart postgresql
  when:
      - pgs12cis_rule_3_1_14
      - pgs12cis_section3
  tags:
      - level1-postgresql
      - level1-postgresqlonlinux
      - scored
      - patch
      - rule_3.1.14

- name: "SCORED | 3.1.15 | PATCH | Ensure 'debug_print_rewritten' is disabled"
  lineinfile:
      path: "{{ pgs12cis_data_folder }}/postgresql.conf"
      regexp: '^debug_print_rewritten =|^#debug_print_rewritten ='
      line: "debug_print_rewritten = off"
  notify: restart postgresql
  when:
      - pgs12cis_rule_3_1_15
      - pgs12cis_section3
  tags:
      - level1-postgresql
      - level1-postgresqlonlinux
      - scored
      - patch
      - rule_3.1.15

- name: "SCORED | 3.1.16 | PATCH | Ensure 'debug_print_plan' is disabled"
  lineinfile:
      path: "{{ pgs12cis_data_folder }}/postgresql.conf"
      regexp: '^debug_print_plan =|^#debug_print_plan ='
      line: "debug_print_plan = off"
  notify: restart postgresql
  when:
      - pgs12cis_rule_3_1_16
      - pgs12cis_section3
  tags:
      - level1-postgresql
      - level1-postgresqlonlinux
      - scored
      - patch
      - rule_3.1.16

- name: "SCORED | 3.1.17 | PATCH | Ensure 'debug_pretty_print' is enabled"
  lineinfile:
      path: "{{ pgs12cis_data_folder }}/postgresql.conf"
      regexp: '^debug_pretty_print =|^#debug_pretty_print ='
      line: "debug_pretty_print = on"
  notify: restart postgresql
  when:
      - pgs12cis_rule_3_1_17
      - pgs12cis_section3
  tags:
      - level1-postgresql
      - level1-postgresqlonlinux
      - scored
      - patch
      - rule_3.1.17

- name: "SCORED | 3.1.18 | PATCH | Ensure 'log_connections' is enabled"
  lineinfile:
      path: "{{ pgs12cis_data_folder }}/postgresql.conf"
      regexp: '^log_connections =|^#log_connections ='
      line: "log_connections = on"
  notify: restart postgresql
  when:
      - pgs12cis_rule_3_1_18
      - pgs12cis_section3
  tags:
      - level1-postgresql
      - level1-postgresqlonlinux
      - scored
      - patch
      - rule_3.1.18

- name: "SCORED | 3.1.19 | PATCH | Ensure 'log_disconnections' is enabled"
  lineinfile:
      path: "{{ pgs12cis_data_folder }}/postgresql.conf"
      regexp: '^log_disconnections =|^#log_disconnections ='
      line: "log_disconnections = on"
  notify: restart postgresql
  when:
      - pgs12cis_rule_3_1_19
      - pgs12cis_section3
  tags:
      - level1-postgresql
      - level1-postgresqlonlinux
      - scored
      - patch
      - rule_3.1.19

- name: "SCORED | 3.1.20 | PATCH | Ensure 'log_error_verbosity' is set correctly"
  lineinfile:
      path: "{{ pgs12cis_data_folder }}/postgresql.conf"
      regexp: '^log_error_verbosity =|^#log_error_verbosity ='
      line: "log_error_verbosity = {{ pgs12cis_log_error_verbosity }}"
  notify: restart postgresql
  when:
      - pgs12cis_rule_3_1_20
      - pgs12cis_section3
  tags:
      - level1-postgresql
      - level1-postgresqlonlinux
      - scored
      - patch
      - rule_3.1.20

- name: "SCORED | 3.1.21 | PATCH | Ensure 'log_hostname' is set correctly"
  lineinfile:
      path: "{{ pgs12cis_data_folder }}/postgresql.conf"
      regexp: '^log_hostname =|^#log_hostname ='
      line: "log_hostname = {{ pgs12cis_log_hostname }}"
  notify: restart postgresql
  when:
      - pgs12cis_rule_3_1_21
      - pgs12cis_section3
  tags:
      - level1-postgresql
      - level1-postgresqlonlinux
      - scored
      - patch
      - rule_3.1.21

- name: "NOTSCORED | 3.1.22 | PATCH | Ensure 'log_line_prefix' is set correctly"
  lineinfile:
      path: "{{ pgs12cis_data_folder }}/postgresql.conf"
      regexp: '^log_line_prefix =|^#log_line_prefix ='
      line: "log_line_prefix = '{{ pgs12cis_log_line_prefix }}'"
  notify: restart postgresql
  when:
      - pgs12cis_rule_3_1_22
      - pgs12cis_section3
  tags:
      - level1-postgresql
      - level1-postgresqlonlinux
      - notscored
      - patch
      - rule_3.1.22

- name: "SCORED | 3.1.23 | PATCH | Ensure 'log_statement' is set correctly"
  lineinfile:
      path: "{{ pgs12cis_data_folder }}/postgresql.conf"
      regexp: '^log_statement =|^#log_statement ='
      line: "log_statement = '{{ pgs12cis_log_statement }}'"
  notify: restart postgresql
  when:
      - pgs12cis_rule_3_1_23
      - pgs12cis_section3
  tags:
      - level1-postgresql
      - level1-postgresqlonlinux
      - scored
      - patch
      - rule_3.1.23

- name: "SCORED | 3.1.24 | PATCH | Ensure 'log_timezone' is set correctly"
  lineinfile:
      path: "{{ pgs12cis_data_folder }}/postgresql.conf"
      regexp: '^log_timezone =|^#log_timezone ='
      line: "log_timezone = '{{ pgs12cis_log_timezone }}'"
  notify: restart postgresql
  when:
      - pgs12cis_rule_3_1_24
      - pgs12cis_section3
  tags:
      - level1-postgresql
      - level1-postgresqlonlinux
      - scored
      - patch
      - rule_3.1.24

- name: "SCORED | 3.2 | PATCH | Ensure the PostgreSQL Audit Extension (pgAudit) is enabled"
  block:
      - name: "SCORED | 3.2 | PATCH | Ensure the PostgreSQL Audit Extension (pgAudit) is enabled | Install pgAudit RHEL8"
        dnf:
            name: pgaudit14_12
            state: present
        when: ansible_distribution_major_version == "8"

      - name: "SCORED | 3.2 | PATCH | Ensure the PostgreSQL Audit Extension (pgAudit) is enabled | Install pgAudit RHEL7"
        yum:
            name: pgaudit14_12
            state: present
        when: ansible_distribution_major_version == "7"

      - name: "SCORED | 3.2 | PATCH | Ensure the PostgreSQL Audit Extension (pgAudit) is enabled | Set pgAudit settings in postgresql.conf"
        lineinfile:
            path: "{{ pgs12cis_data_folder }}/postgresql.conf"
            regexp: "{{ item.regexp }}"
            line: "{{ item.line }}"
            insertafter: "{{ item.insertafter }}"
        notify: restart postgresql
        with_items:
            - { regexp: '^shared_preload_libraries =|^#shared_preload_libraries =', line: "shared_preload_libraries = '{{ pgs12cis_shared_preload_libraries }}'", insertafter: EOF }
            - { regexp: '^# for this example we are logging the ddl and write operations', line: '# for this example we are logging the ddl and write operations', insertafter: EOF }
            - { regexp: '^pgaudit.log=', line: "pgaudit.log='{{ pgs12cis_pgaudit_log_types  }}'", insertafter: '# for this example we are logging the ddl and write operations'}
  when:
      - pgs12cis_rule_3_2
      - pgs12cis_section3
  tags:
      - level1-postgresql
      - level1-postgresqlonlinux
      - scored
      - patch
      - rule_3.2

- name: "SCORED | 4.1 | PATCH | Ensure sudo is configured correctly"
  block:
      - name: "SCORED | 4.1 | PATCH | Ensure sudo is configured correctly | Configure pg_wheel to sudoers"
        lineinfile:
            path: /etc/sudoers.d/postgres
            regexp: '^%pg_wheel ALL='
            line: '%pg_wheel ALL= /bin/su - {{ pgs12cis_pgs12_usr }}'
            create: yes

      - name: "SCORED | 4.1 | PATCH | Ensure sudo is configured correctly | Set file permissions"
        file:
            path: /etc/sudoers.d/postgres
            mode: 0600
  when:
      - pgs12cis_rule_4_1
      - pgs12cis_section4
  tags:
      - level1-postgresqlonlinux
      - scored
      - patch
      - rule_4.1

- name: "SCORED | 4.2 | PATCH | Ensure excessive administrative privileges are revoked"
  block:
      - name: "SCORED | 4.2 | AUDIT | Ensure excessive administrative privileges are revoked | Get list of PostgreSQL users"
        shell: psql -t -c "\du" | awk '{print $1}' | sed -r '/^\s*$/d'
        changed_when: false
        failed_when: false
        become_user: "{{ pgs12cis_pgs12_usr }}"
        register: pgs12cis_4_2_all_postgresql_users

      - set_fact:
          pgs12cis_disallowed_superusers: "{{ pgs12cis_4_2_all_postgresql_users.stdout_lines | difference(pgs12cis_allowed_superusers) }}"

      - name: "SCORED | 4.2 | PATCH | Ensure excessive administrative privileges are revoked | Remove excessive privileges from users"
        command: psql -c 'alter user {{ item }} with NOSUPERUSER NOCREATEROLE NOCREATEDB NOREPLICATION NOBYPASSRLS ;'
        become_user: "{{ pgs12cis_pgs12_usr }}"
        with_items:
            - "{{ pgs12cis_disallowed_superusers }}"
  when:
      - pgs12cis_rule_4_2
      - pgs12cis_section4
  tags:
      - level1-postgresql
      - scored
      - patch
      - rule_4.2

- name: "SCORED | 4.3 | AUDIT | Ensure excessive function privileges are revoked"
  block:
      - name: "SCORED | 4.3 | AUDIT | Ensure excessive function privileges are revoked"
        command: psql -c "SELECT nspname, proname, proargtypes, prosecdef, rolname, proconfig FROM pg_proc p JOIN pg_namespace n ON p.pronamespace = n.oid JOIN pg_authid a ON a.oid = p.proowner WHERE prosecdef OR NOT proconfig IS NULL;"
        changed_when: false
        failed_when: false
        become_user: "{{ pgs12cis_pgs12_usr }}"
        register: pgs12cis_4_3_security_definer

      - name: "SCORED | 4.3 | AUDIT | Ensure excessive function privileges are revoked"
        debug:
            msg:
                - "Caution! Please review the list below and confirm all results should have Security Definer status"
                - "When possible revoke Security Definer, Security Invoker is another option that is valid to use"
                - "{{ pgs12cis_4_3_security_definer.stdout_lines }}"
  when:
      - pgs12cis_rule_4_3
      - pgs12cis_section4
  tags:
      - level1-postgresqlonlinux
      - scored
      - audit
      - rule_4.3

- name: "SCORED | 4.4 | PATCH | Ensure excessive DML privileges are revoked"
  command: /bin/true
  changed_when: false
  failed_when: false
  when:
      - pgs12cis_rule_4_4
      - pgs12cis_section4
  tags:
      - level1-postgresql
      - scored
      - audit
      - rule_4.4
      - notimplemented

- name: "NOTSCORED | 4.5 | PATCH | Use pg_permission extension to audit object permissions"
  command: /bin/true
  changed_when: false
  failed_when: false
  when:
      - pgs12cis_rule_4_5
      - pgs12cis_section4
  tags:
      - level1-postgresql
      - scored
      - audit
      - rule_4.5
      - notimplemented

- name: "NOTSCORED | 4.6 | PATCH | Ensure Row Level Security (RLS) is configured correctly"
  command: /bin/true
  changed_when: false
  failed_when: false
  when:
      - pgs12cis_rule_4_6
      - pgs12cis_section4
  tags:
      - level1-postgresql
      - scored
      - audit
      - rule_4.6
      - notimplemented

- name: "NOTSCORED | 4.7 | PATCH | Ensure the set_user extension is installed"
  command: /bin/true
  changed_when: false
  failed_when: false
  when:
      - pgs12cis_rule_4_7
      - pgs12cis_section4
  tags:
      - level1-postgresql
      - scored
      - audit
      - rule_4.7
      - notimplemented

- name: "NOTSCORED | 4.8 | PATCH | Make use of default roles"
  command: /bin/true
  changed_when: false
  failed_when: false
  when:
      - pgs12cis_rule_4_8
      - pgs12cis_section4
  tags:
      - level1-postgresql
      - scored
      - audit
      - rule_4.8
      - notimplemented

- name: 'NOTSCORED | 5.1 | PATCH | Ensure login via "local" UNIX Domain Socket is configured correctly'
  command: /bin/true
  changed_when: false
  failed_when: false
  when:
      - pgs12cis_rule_5_1
      - pgs12cis_section5
  tags:
      - level1-postgresqlonlinux
      - scored
      - audit
      - rule_5.1
      - notimplemented

- name: 'SCORED | 5.2 | PATCH | Ensure login via "host" TCP/IP Socket is configured correctly'
  block:
      - name: 'SCORED | 5.2 | PATCH | Ensure login via "host" TCP/IP Socket is configured correctly | Set listen_addresses'
        lineinfile:
            path: "{{ pgs12cis_data_folder }}/postgresql.conf"
            regexp: '^listen_addresses =|^#listen_addresses ='
            line: "listen_addresses = '*'"
        notify: restart postgresql

      - name: 'SCORED | 5.2 | PATCH | Ensure login via "host" TCP/IP Socket is configured correctly | Set allow encrypted and deny unencrypted'
        lineinfile:
            path: "{{ pgs12cis_data_folder }}/pg_hba.conf"
            regexp: "{{ item.regexp }}"
            line: "{{ item.line }}"
            insertafter: "{{ item.insertafter }}"
        notify: restart postgresql
        with_items:
            - { regexp: '^this is just a place holder value', line: '# The two rules below were inserted via CIS automation', insertafter: '^#.*TYPE.*DATABASE.*USER.*ADDRESS.*METHOD' }
            - { regexp: '^hostnossl.*all.*{{ pgs12cis_pgs12_usr }}', line: 'hostnossl all           {{ pgs12cis_pgs12_usr }}        0.0.0.0/0               reject', insertafter: '# The two rules below were inserted via CIS automation' }
            - { regexp: '^hostssl.*all.*{{ pgs12cis_pgs12_usr }}', line: "hostssl all             {{ pgs12cis_pgs12_usr }}        0.0.0.0/0               {{ pgs12cis_encrypt_method }}", insertafter: '# The two rules below were inserted via CIS automation' }
  when:
      - pgs12cis_rule_5_2
      - pgs12cis_section5
  tags:
      - level1-postgresqlonlinux
      - scored
      - audit
      - rule_5.2
      - notimplemented